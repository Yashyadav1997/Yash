
Python Basic Assignment 11
Q. Create an assert statement that throws an AssertionError if the variable spam is a negative integer.

Ans. The assert statement is used to continue the execute if the given condition evaluates to True. If the assert condition evaluates to False, then it raises the AssertionError exception with the specified error message.

!pip install pyinputplus

     
Collecting pyinputplus
  Downloading PyInputPlus-0.2.12.tar.gz (20 kB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
    Preparing wheel metadata ... done
Collecting pysimplevalidate>=0.2.7
  Downloading PySimpleValidate-0.2.12.tar.gz (22 kB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
    Preparing wheel metadata ... done
Collecting stdiomask>=0.0.3
  Downloading stdiomask-0.0.6.tar.gz (3.6 kB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
    Preparing wheel metadata ... done
Building wheels for collected packages: pyinputplus, pysimplevalidate, stdiomask
  Building wheel for pyinputplus (PEP 517) ... done
  Created wheel for pyinputplus: filename=PyInputPlus-0.2.12-py3-none-any.whl size=11315 sha256=4073d26e512184d86bdd61a135bd280df0b2e124858327dd124bfb42bec30335
  Stored in directory: /root/.cache/pip/wheels/e7/33/73/719f8f1bd984d39face880fd22f6c5ef1b85f726e84c687094
  Building wheel for pysimplevalidate (PEP 517) ... done
  Created wheel for pysimplevalidate: filename=PySimpleValidate-0.2.12-py3-none-any.whl size=16192 sha256=35c03a85c5b04946eeb93c8dab3852f908c869153a94cbcadedaf6dd111ea17b
  Stored in directory: /root/.cache/pip/wheels/5a/8b/6c/2925d22b93860bdc9b8ce02c3d2cf79336606f7469cef66065
  Building wheel for stdiomask (PEP 517) ... done
  Created wheel for stdiomask: filename=stdiomask-0.0.6-py3-none-any.whl size=3320 sha256=550df7a704fc18c4f9f3da59ccdee4e8c42e674f9a1eb71185fbddfe1b2108d9
  Stored in directory: /root/.cache/pip/wheels/cf/13/89/64d0d3b167759523f4c1e68f883bbc30e7bfa27050edeb418e
Successfully built pyinputplus pysimplevalidate stdiomask
Installing collected packages: stdiomask, pysimplevalidate, pyinputplus
Successfully installed pyinputplus-0.2.12 pysimplevalidate-0.2.12 stdiomask-0.0.6

import pyinputplus as pyip

spam = pyip.inputNum(" Enter a positive number :")
assert spam > 0
print(spam,'is a positive number')
     
 Enter a positive number :-8
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
 in ()
      2 
      3 spam = pyip.inputNum(" Enter a positive number :")
----> 4 assert spam > 0
      5 print(spam,'is a positive number')

AssertionError: 
Q. 2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).


eggs='Hello'
bacon ='hello'

assert eggs.lower() != bacon.lower() or eggs.upper() != bacon.upper()
print('The eggs and bacon variables are not the same!')
     
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
 in ()
      2 bacon ='hello'
      3 
----> 4 assert eggs.lower() != bacon.lower() or eggs.upper() != bacon.upper()
      5 print('The eggs and bacon variables are not the same!')

AssertionError: 
Q. Create an assert statement that throws an AssertionError every time.

assert False - this always triggers an exception

assert False
     
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
 in ()
----> 1 assert False

AssertionError: 
Q. 4. What are the two lines that must be present in your software in order to call logging.debug()?


import logging as lg
lg.basicConfig(level=lg.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')
     
What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?

import logging as lg
lg.basicConfig(filename='programLog.txt', level=lg.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')
     
Q. What are the five levels of logging?

Ans .Five level of loggins are DEBUG, INFO, WARNING, ERROR, and CRITICAL

logging.debug() - variable's state and small details

logging.info() - general events, confirm a program is working

logging.warning() - potiental problem to work on in the future

logging.error() - record an error that caused program to fail to do something

logging.critical() - fatal error that has caused

`Q. What line of code would you add to your software to disable all logging messages?


import logging as lg
lg.disable(lg.CRITICAL)
     
Q. Why is using logging messages better than using print() to display the same message?

Ans.

You can disable logging messages without removing the logging function calls.

You can selectively disable lower-level logging messages.

You can create logging messages. Logging messages provides a timestamp.

Q. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?

Ans.

The Step in button will move the debugger into a function call.

The Over button will quickly execute the function call without stepping into it.

The Out button will quickly execute the rest of the code until it steps out of the function it currently is in.

Q. After you click Continue, when will the debugger stop ?

Ans. It will stops at next breakpoint, if there are no further breakpoints program will be fully executed.
Q.What is the concept of a breakpoint?

Ans. A breakpoint is an intentional stopping point or pause put into a program for debugging purposes.


          
